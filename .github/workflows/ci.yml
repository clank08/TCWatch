name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  CACHE_VERSION: v1

jobs:
  # Job to detect changes in different workspaces
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      packages: ${{ steps.changes.outputs.packages }}
      root: ${{ steps.changes.outputs.root }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'TC-Frontend/**'
              - 'packages/**'
            backend:
              - 'TC-Backend/**'
              - 'packages/**'
            packages:
              - 'packages/**'
            root:
              - 'package.json'
              - 'package-lock.json'
              - '.github/**'
              - 'tsconfig.json'
              - '.eslintrc.*'
              - '.prettierrc'

  # Setup and install dependencies (shared by all jobs)
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            node_modules
            TC-Frontend/node_modules
            TC-Backend/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build shared packages
        run: npm run packages:build

  # Linting and formatting
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            TC-Frontend/node_modules
            TC-Backend/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Run TypeScript type check
        run: npm run type-check

  # Frontend tests
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.packages == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            TC-Frontend/node_modules
            TC-Backend/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - name: Run frontend tests
        run: npm run frontend:test
        env:
          CI: true

      - name: Upload frontend test coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ./TC-Frontend/coverage
          flags: frontend
          name: frontend-coverage

  # Backend tests
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.packages == 'true'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: tcwatch_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            TC-Frontend/node_modules
            TC-Backend/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - name: Setup test environment
        run: |
          cd TC-Backend
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/tcwatch_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: |
          cd TC-Backend
          npm run db:generate
          npm run db:migrate
        env:
          NODE_ENV: test

      - name: Run backend tests
        run: npm run backend:test
        env:
          CI: true
          NODE_ENV: test

      - name: Upload backend test coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: ./TC-Backend/coverage
          flags: backend
          name: backend-coverage

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.packages == 'true'
    strategy:
      matrix:
        workspace: [frontend, backend]
        exclude:
          - workspace: frontend
            condition: ${{ needs.changes.outputs.frontend != 'true' && needs.changes.outputs.packages != 'true' }}
          - workspace: backend
            condition: ${{ needs.changes.outputs.backend != 'true' && needs.changes.outputs.packages != 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            TC-Frontend/node_modules
            TC-Backend/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - name: Build frontend
        if: matrix.workspace == 'frontend' && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.packages == 'true')
        run: npm run frontend:build

      - name: Build backend
        if: matrix.workspace == 'backend' && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.packages == 'true')
        run: npm run backend:build

      - name: Cache build artifacts
        if: matrix.workspace == 'backend'
        uses: actions/cache@v4
        with:
          path: TC-Backend/dist
          key: ${{ runner.os }}-backend-build-${{ github.sha }}

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.root == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Summary job that all other jobs depend on
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [lint, test-frontend, test-backend, build, security]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.test-frontend.result }}" == "failure" ]] || \
             [[ "${{ needs.test-backend.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]] || \
             [[ "${{ needs.security.result }}" == "failure" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs completed successfully"

      - name: Post success comment
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All CI checks passed! This PR is ready for review.'
            });
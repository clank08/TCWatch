name: 🧪 Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Backend Unit and Integration Tests
  backend-tests:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: tcwatch_test
          POSTGRES_PASSWORD: tcwatch_test
          POSTGRES_DB: tcwatch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgresql://tcwatch_test:tcwatch_test@localhost:5432/tcwatch_test
      TEST_DATABASE_URL: postgresql://tcwatch_test:tcwatch_test@localhost:5432/tcwatch_test
      REDIS_URL: redis://localhost:6379
      NODE_ENV: test
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Setup test database
        working-directory: TC-Backend
        run: |
          npx prisma migrate reset --force
          npx prisma db seed

      - name: 🧪 Run unit tests
        working-directory: TC-Backend
        run: npm run test:unit

      - name: 🧪 Run integration tests
        working-directory: TC-Backend
        run: npm run test:integration

      - name: 📊 Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: TC-Backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Unit and Integration Tests
  frontend-tests:
    name: 📱 Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run frontend unit tests
        working-directory: TC-Frontend
        run: npm run test:ci

      - name: 📊 Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          files: TC-Frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # E2E Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: tcwatch_test
          POSTGRES_PASSWORD: tcwatch_test
          POSTGRES_DB: tcwatch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgresql://tcwatch_test:tcwatch_test@localhost:5432/tcwatch_test
      TEST_DATABASE_URL: postgresql://tcwatch_test:tcwatch_test@localhost:5432/tcwatch_test
      REDIS_URL: redis://localhost:6379
      NODE_ENV: test
      CI: true

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        working-directory: e2e-tests
        run: npx playwright install --with-deps

      - name: 🔧 Setup test database
        working-directory: TC-Backend
        run: |
          npx prisma migrate reset --force
          npx prisma db seed

      - name: 🚀 Start backend server
        working-directory: TC-Backend
        run: |
          npm run build
          npm start &
          sleep 10
        env:
          PORT: 3001

      - name: 🚀 Start frontend server
        working-directory: TC-Frontend
        run: |
          npm run build
          npx serve -s dist -l 3000 &
          sleep 10

      - name: 🎭 Run E2E tests
        working-directory: e2e-tests
        run: npx playwright test
        env:
          BASE_URL: http://localhost:3000

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: e2e-tests/playwright-report/
          retention-days: 30

      - name: 📊 Upload E2E test traces
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-traces
          path: e2e-tests/test-results/
          retention-days: 30

  # Type Checking
  type-check:
    name: 🔍 Type Check
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Type check backend
        working-directory: TC-Backend
        run: npm run type-check

      - name: 🔍 Type check frontend
        working-directory: TC-Frontend
        run: npm run type-check

      - name: 🔍 Type check shared packages
        run: npm run type-check

  # Linting and Formatting
  lint:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🔍 Check Prettier formatting
        run: npm run format:check

  # Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run npm audit
        run: npm audit --audit-level high

      - name: 🔒 Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Performance Tests
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Test Summary
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, type-check, lint, security]
    if: always()

    steps:
      - name: 📊 Generate test summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.type-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
name: Backend Deployment

on:
  push:
    branches: [main]
    paths:
      - 'TC-Backend/**'
      - 'packages/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tcwatch/backend
  NODE_VERSION: '20'

jobs:
  # Build and test before deployment
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.meta.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for backend changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'TC-Backend/**'
              - 'packages/**'

      - name: Setup Node.js
        if: steps.changes.outputs.backend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        if: steps.changes.outputs.backend == 'true'
        run: npm ci

      - name: Build packages
        if: steps.changes.outputs.backend == 'true'
        run: npm run packages:build

      - name: Run backend tests
        if: steps.changes.outputs.backend == 'true'
        run: npm run backend:test
        env:
          CI: true

      - name: Build backend
        if: steps.changes.outputs.backend == 'true'
        run: npm run backend:build

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

  # Build and push Docker image
  build-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.backend-changed == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./TC-Backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-image
    if: needs.pre-deploy-checks.outputs.backend-changed == 'true'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for HIGH/CRITICAL vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-image, security-scan]
    if: |
      needs.pre-deploy-checks.outputs.backend-changed == 'true' &&
      (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://api-staging.tcwatch.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster tcwatch-staging \
            --service tcwatch-backend-staging \
            --force-new-deployment \
            --task-definition tcwatch-backend-staging

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster tcwatch-staging \
            --services tcwatch-backend-staging

      - name: Run health check
        run: |
          timeout 300 bash -c 'until curl -f https://api-staging.tcwatch.app/health; do sleep 10; done'

      - name: Run smoke tests
        run: |
          curl -f https://api-staging.tcwatch.app/health
          curl -f https://api-staging.tcwatch.app/api/trpc/health.check

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, build-image, security-scan, deploy-staging]
    if: |
      needs.pre-deploy-checks.outputs.backend-changed == 'true' &&
      github.ref == 'refs/heads/main' &&
      github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://api.tcwatch.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false,
              description: 'Production deployment'
            });
            return deployment.data.id;

      - name: Set deployment status to in progress
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deploying to production...'
            });

      - name: Deploy to ECS with blue-green strategy
        run: |
          # Create new task definition revision
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition tcwatch-backend-production --query taskDefinition)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query 'taskDefinition.taskDefinitionArn' --output text)

          # Update service with new task definition
          aws ecs update-service \
            --cluster tcwatch-production \
            --service tcwatch-backend-production \
            --task-definition $NEW_TASK_DEF_ARN

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster tcwatch-production \
            --services tcwatch-backend-production

      - name: Run health check
        run: |
          timeout 300 bash -c 'until curl -f https://api.tcwatch.app/health; do sleep 10; done'

      - name: Run production smoke tests
        run: |
          curl -f https://api.tcwatch.app/health
          curl -f https://api.tcwatch.app/api/trpc/health.check

      - name: Set deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Production deployment successful',
              environment_url: 'https://api.tcwatch.app'
            });

      - name: Set deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Production deployment failed'
            });

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-staging, deploy-production]
    environment:
      name: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Rollback to previous version
        run: |
          # Get previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster tcwatch-production \
            --services tcwatch-backend-production \
            --query 'services[0].deployments[?status==`PRIMARY`].taskDefinition' \
            --output text)

          # Rollback service
          aws ecs update-service \
            --cluster tcwatch-production \
            --service tcwatch-backend-production \
            --task-definition $PREVIOUS_TASK_DEF \
            --force-new-deployment

      - name: Wait for rollback
        run: |
          aws ecs wait services-stable \
            --cluster tcwatch-production \
            --services tcwatch-backend-production

      - name: Verify rollback
        run: |
          curl -f https://api.tcwatch.app/health

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '✅ TCWatch Backend deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '❌ TCWatch Backend deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
version: '3.8'

name: tcwatch-monitoring

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: tcwatch-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
    depends_on:
      - node-exporter
      - cadvisor

  # Grafana for dashboards and visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tcwatch-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring-network
    depends_on:
      - prometheus

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: tcwatch-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring-network

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: tcwatch-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring-network

  # AlertManager for alert routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: tcwatch-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring-network

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: tcwatch-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://tcwatch-redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev_redis_123}
    ports:
      - "9121:9121"
    networks:
      - monitoring-network
      - tcwatch-network
    depends_on:
      - redis

  # PostgreSQL Exporter for database metrics (when using local PostgreSQL)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: tcwatch-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=${POSTGRES_EXPORTER_DSN:-postgresql://user:password@supabase-host:5432/database?sslmode=require}
    ports:
      - "9187:9187"
    networks:
      - monitoring-network
    profiles:
      - postgres-metrics

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: tcwatch-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/local-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - monitoring-network

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: tcwatch-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring-network
    depends_on:
      - loki

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local

networks:
  monitoring-network:
    driver: bridge
  tcwatch-network:
    external: true